{"version":3,"sources":["modules/action/index.js","assets/info.js","component/Item.jsx","component/Detail.jsx","component/List.jsx","Routes.jsx","modules/reducer/index.js","App.jsx","modules/store/index.js","index.jsx"],"names":["Types","CREATE_ITEM","UPDATE_ITEM","DELETE_ITEM","item","type","payload","HEADER","TYPE","useStyle","makeStyles","label","marginRight","Item","props","value","onChange","isEditable","endorment","menuItems","classes","Typography","component","variant","className","TextField","event","target","InputProps","select","undefined","map","MenuItem","filter","menuItem","theme","container","marginTop","mixins","toolbar","minHeight","inputGroup","marginBottom","alert","warn","color","noWarn","Detail","history","useHistory","params","useParams","data","useSelector","state","items","id","toString","useState","setEditable","dispatch","useDispatch","name","setName","code","setCode","city","setCity","space_available","spaceAvailble","setSpaceAvailble","findIndex","setType","cluster","setcluster","is_registered","isRegistered","setRegistered","is_live","isLive","setLive","newChange","setNewChange","AppBar","Toolbar","IconButton","edge","onClick","goBack","fontSize","Container","maxWidth","Card","CardContent","startAdornment","InputAdornment","position","CardActions","Button","style","marginLeft","size","newItem","Actions","paper","margin","title","flex","fab","bottom","spacing","right","useModalStyle","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","el","index","sort","EnhancedRow","TableRow","hover","key","TableCell","Tooltip","push","AddModal","open","onClose","setCluster","success","setSuccess","Dialog","keepMounted","DialogTitle","DialogContent","DialogActions","autoFocus","Snackbar","autoHideDuration","elevation","severity","List","setOrder","setOrderBy","keyword","setKeyword","isModalOpen","setModalOpen","anchorEl","setAnchorEl","live","registered","Paper","Input","placeholder","endAdornment","aria-label","currentTarget","Menu","Boolean","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","TableContainer","Table","TableHead","TableSortLabel","active","direction","requestSortBy","TableBody","toLowerCase","search","Fab","Routes","path","defaultState","reducer","action","maxxId","forEach","newState","newItems","initialState","window","REDUX_INITIAL_DATA","reduxStore","createStore","applyMiddleware","logger","createMuiTheme","myTheme","primary","App","store","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.341f71aa.chunk.js","sourcesContent":["const Types = {\n    CREATE_ITEM: 'CREATE_ITEM',\n    UPDATE_ITEM: 'UPDATE_ITEM',\n    DELETE_ITEM: 'DELETE_ITEM',\n};\n\nconst createItem = (item) => ({\n    type: Types.CREATE_ITEM,\n    payload: item,\n});\n\nconst updateItem = (item) => ({\n    type: Types.UPDATE_ITEM,\n    payload: item,\n});\n\nconst deleteItem = (item) => ({\n    type: Types.DELETE_ITEM,\n    payload: item,\n});\n\nexport default {\n    Types,\n    createItem,\n    updateItem,\n    deleteItem,\n};\n","export const HEADER = [\n    'city',\n    'cluster',\n    'code',\n    'id',\n    'is_live',\n    'is_registered',\n    'name',\n    'space_available',\n    'type',\n];\nexport const TYPE = ['Leasable Space', 'Warehouse Service'];\n\nexport const EDITABLES = ['city', 'name', 'space_available', 'type', 'is_live'];\n","import React from 'react';\nimport { makeStyles, MenuItem, TextField, Typography } from '@material-ui/core';\n\nconst useStyle = makeStyles(() => ({\n    label: {\n        marginRight: '20px',\n    },\n}));\n\nconst Item = (props) => {\n    const {\n        label,\n        value,\n        type,\n        onChange,\n        isEditable,\n        endorment,\n        menuItems,\n        ...rest\n    } = props;\n    const classes = useStyle();\n\n    return (\n        <>\n            <Typography component='span' variant='h5' className={classes.label}>\n                {label} :\n            </Typography>\n            {isEditable ? (\n                <TextField\n                    value={value}\n                    onChange={(event) =>\n                        onChange && onChange(event.target.value)\n                    }\n                    InputProps={endorment}\n                    select={type === 'menu'}\n                    type={type !== 'menu' ? type : undefined}\n                >\n                    {menuItems &&\n                        menuItems.map((item) => (\n                            <MenuItem key={item.label} value={item.value}>\n                                {item.label}\n                            </MenuItem>\n                        ))}\n                </TextField>\n            ) : (\n                <Typography component='span' variant='h6'>\n                    {type !== 'menu'\n                        ? value\n                        : menuItems.filter(\n                              (menuItem) => menuItem.value === value\n                          )[0].label}\n                </Typography>\n            )}\n        </>\n    );\n};\n\nexport default Item;\n","import React, { useState } from 'react';\nimport {\n    AppBar,\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    Container,\n    IconButton,\n    InputAdornment,\n    makeStyles,\n    MenuItem,\n    TextField,\n    Toolbar,\n    Typography,\n} from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Actions from '../modules/action';\nimport { TYPE } from '../assets/info';\nimport Item from './Item';\n\nconst useStyle = makeStyles((theme) => ({\n    container: {\n        marginTop: theme.mixins.toolbar.minHeight + 30,\n    },\n    label: {\n        marginRight: '20px',\n    },\n    inputGroup: {\n        marginBottom: '5px',\n    },\n    alert: {\n        marginBottom: '10px',\n    },\n    warn: {\n        color: '#ce6866',\n    },\n    noWarn: {\n        color: '#428342',\n    },\n}));\n\nconst Detail = () => {\n    const history = useHistory();\n    const params = useParams();\n    const data = useSelector(\n        (state) =>\n            state.items.filter((item) => item.id.toString() === params.id)[0]\n    );\n    const classes = useStyle();\n    const [isEditable, setEditable] = useState(false);\n    const dispatch = useDispatch();\n    const [name, setName] = useState(data.name);\n    const [code, setCode] = useState(data.code);\n    const [id, setId] = useState(data.id);\n    const [city, setCity] = useState(data.city);\n    const [spaceAvailble, setSpaceAvailble] = useState(data.space_available);\n    const [type, setType] = useState(\n        TYPE.findIndex((item) => data.type === item)\n    );\n    const [cluster, setcluster] = useState(data.cluster);\n    const [isRegistered, setRegistered] = useState(data.is_registered);\n    const [isLive, setLive] = useState(data.is_live);\n    const [newChange, setNewChange] = useState(false);\n\n    const giveList = () => [\n        {\n            label: 'Name',\n            value: name,\n            type: 'text',\n            // endorment: {\n            //     startAdornment: (\n            //         <InputAdornment position='start'>Warehouse-</InputAdornment>\n            //     ),\n            // },\n            // menuItems:{\n\n            // }\n            onChange: (value) => {\n                setName(value);\n                setNewChange(true);\n            },\n            isEditable,\n        },\n        {\n            label: 'Code',\n            value: code,\n            type: 'number',\n            endorment: {\n                startAdornment: (\n                    <InputAdornment position='start'>W-</InputAdornment>\n                ),\n            },\n            onChange: (value) => {\n                setCode(value);\n                setNewChange(true);\n            },\n            isEditable: false,\n        },\n        {\n            label: 'ID',\n            value: id,\n            type: 'number',\n            isEditable: false,\n        },\n        {\n            label: 'City',\n            value: city,\n            type: 'text',\n            onChange: (value) => {\n                setCity(value);\n                setNewChange(true);\n            },\n            isEditable,\n        },\n        {\n            label: 'Space Available',\n            value: spaceAvailble,\n            type: 'number',\n            onChange: (value) => {\n                setSpaceAvailble(value);\n                setNewChange(true);\n            },\n            isEditable,\n        },\n        {\n            label: 'Type',\n            value: type,\n            type: 'menu',\n            onChange: (value) => {\n                setType(value);\n                setNewChange(true);\n            },\n            isEditable,\n            menuItems: [\n                {\n                    label: TYPE[0],\n                    value: 0,\n                },\n                {\n                    label: TYPE[1],\n                    value: 1,\n                },\n            ],\n        },\n        {\n            label: 'Cluster Name',\n            value: cluster,\n            // type: 'number',\n            isEditable: false,\n        },\n        {\n            label: 'Registered',\n            value: isRegistered,\n            type: 'menu',\n            onChange: (value) => {\n                setRegistered(value);\n                setNewChange(true);\n            },\n            isEditable,\n            menuItems: [\n                {\n                    label: 'Yes',\n                    value: true,\n                },\n                {\n                    label: 'No',\n                    value: false,\n                },\n            ],\n        },\n        {\n            label: 'Live',\n            value: isLive,\n            type: 'menu',\n            onChange: (value) => {\n                setLive(value);\n                setNewChange(true);\n            },\n            isEditable,\n            menuItems: [\n                {\n                    label: 'Yes',\n                    value: true,\n                },\n                {\n                    label: 'No',\n                    value: false,\n                },\n            ],\n        },\n    ];\n\n    /**\n     * This uitlity function is used to create new item from\n     * the edits\n     *\n     * @returns [object]\n     */\n    const giveItem = () => ({\n        city,\n        name,\n        cluster,\n        id,\n        is_live: isLive,\n        is_registered: isRegistered,\n        space_available: spaceAvailble,\n        type: TYPE[type],\n        code,\n    });\n\n    const discardChanges = () => {\n        setName(data.name);\n        setCode(data.code);\n        setCity(data.city);\n        setcluster(data.cluster);\n        setSpaceAvailble(data.space_available);\n        setRegistered(data.is_registered);\n        setLive(data.is_live);\n        setType(TYPE.findIndex((item) => data.type === item));\n    };\n    return (\n        <>\n            <AppBar color='transparent'>\n                <Toolbar>\n                    <IconButton edge='start' onClick={() => history.goBack()}>\n                        <ArrowBackIcon fontSize='large' />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Container maxWidth='sm' className={classes.container}>\n                <Card variant='elevation'>\n                    <CardContent>\n                        {isEditable && newChange && (\n                            <div className={classes.alert}>\n                                <Typography className={classes.warn}>\n                                    *There are changes to save\n                                </Typography>\n                            </div>\n                        )}\n                        {isEditable && !newChange && (\n                            <div className={classes.alert}>\n                                <Typography className={classes.noWarn}>\n                                    *There is no change to save\n                                </Typography>\n                            </div>\n                        )}\n                        {giveList().map((item) => (\n                            <div className={classes.inputGroup}>\n                                <Item {...item} />\n                            </div>\n                        ))}\n                    </CardContent>\n                    <CardActions>\n                        {isEditable ? (\n                            <>\n                                <Button\n                                    style={{ marginLeft: 'auto' }}\n                                    size='medium'\n                                    color='primary'\n                                    variant='contained'\n                                    onClick={() => {\n                                        if (newChange) {\n                                            const newItem = giveItem();\n                                            dispatch(\n                                                Actions.updateItem(newItem)\n                                            );\n                                            setNewChange(false);\n                                        }\n                                    }}\n                                >\n                                    <Typography>Save</Typography>\n                                </Button>\n                                <Button\n                                    size='medium'\n                                    color='secondary'\n                                    variant='contained'\n                                    onClick={() => {\n                                        discardChanges();\n                                        setEditable(false);\n                                        setNewChange(false);\n                                    }}\n                                >\n                                    <Typography>Cancle</Typography>\n                                </Button>\n                            </>\n                        ) : (\n                            <Button\n                                style={{ marginLeft: 'auto' }}\n                                size='medium'\n                                color='primary'\n                                variant='contained'\n                                onClick={() => {\n                                    setEditable(true);\n                                }}\n                            >\n                                <Typography>Edit</Typography>\n                            </Button>\n                        )}\n                    </CardActions>\n                </Card>\n            </Container>\n        </>\n    );\n};\nexport default Detail;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableSortLabel,\n    Toolbar,\n    Typography,\n    Input,\n    InputAdornment,\n    Tooltip,\n    Fab,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    TextField,\n    MenuItem,\n    DialogActions,\n    Button,\n    Snackbar,\n    Menu,\n    FormControl,\n    FormLabel,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/styles';\nimport SearchSharpIcon from '@material-ui/icons/SearchSharp';\nimport NearMeIcon from '@material-ui/icons/NearMe';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { useHistory } from 'react-router-dom';\n\nimport { HEADER, TYPE } from '../assets/info';\nimport Actions from '../modules/action';\nimport Item from './Item';\n\nconst useStyle = makeStyles((theme) => ({\n    paper: {\n        margin: '0.2% 0.4%',\n    },\n    title: {\n        flex: '1 1 100%',\n    },\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(3),\n        right: theme.spacing(4),\n    },\n}));\n\nconst useModalStyle = makeStyles(() => ({\n    label: {\n        marginRight: '20px',\n    },\n    inputGroup: {\n        marginBottom: '5px',\n    },\n    alert: {\n        marginBottom: '10px',\n    },\n    warn: {\n        color: '#ce6866',\n    },\n    noWarn: {\n        color: '#428342',\n    },\n}));\n\nconst descendingComparator = (a, b, orderBy) => {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n};\n\nconst getComparator = (order, orderBy) =>\n    order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n\nconst stableSort = (array, comparator) => {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n};\n\nconst EnhancedRow = ({ item }) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    return (\n        <TableRow hover key={item.id}>\n            {HEADER.map((key) => (\n                <TableCell key={item.id + key}>\n                    {item[key].toString()}\n                </TableCell>\n            ))}\n            <TableCell>\n                <Tooltip title='Delete'>\n                    <IconButton\n                        onClick={() => dispatch(Actions.deleteItem(item))}\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title='Detail'>\n                    <IconButton\n                        onClick={() => history.push(`/detail/${item.id}`, item)}\n                    >\n                        <NearMeIcon />\n                    </IconButton>\n                </Tooltip>\n            </TableCell>\n        </TableRow>\n    );\n};\n\nconst AddModal = ({ open, onClose }) => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [code, setCode] = useState('');\n    const [id, setId] = useState('');\n    const [city, setCity] = useState('');\n    const [spaceAvailble, setSpaceAvailble] = useState(0);\n    const [type, setType] = useState(0);\n    const [cluster, setCluster] = useState('');\n    const [isRegistered, setRegistered] = useState(false);\n    const [isLive, setLive] = useState(false);\n\n    const classes = useModalStyle();\n\n    const [success, setSuccess] = useState(false);\n    const [error, setError] = useState(false);\n\n    const giveList = () => [\n        {\n            label: 'Name',\n            value: name,\n            type: 'number',\n            endorment: {\n                startAdornment: (\n                    <InputAdornment position='start'>Warehouse-</InputAdornment>\n                ),\n            },\n            // menuItems:{\n\n            // }\n            onChange: (value) => {\n                setName(value);\n            },\n            isEditable: true,\n        },\n        {\n            label: 'Code',\n            value: code,\n            type: 'number',\n            endorment: {\n                startAdornment: (\n                    <InputAdornment position='start'>W-</InputAdornment>\n                ),\n            },\n            onChange: (value) => {\n                setCode(value);\n            },\n            isEditable: true,\n        },\n        // {\n        //     label: 'ID',\n        //     value: id,\n        //     type: 'number',\n        //     isEditable: false,\n        // },\n        {\n            label: 'City',\n            value: city,\n            type: 'text',\n            onChange: (value) => {\n                setCity(value);\n            },\n            isEditable: true,\n        },\n        {\n            label: 'Space Available',\n            value: spaceAvailble,\n            type: 'number',\n            onChange: (value) => {\n                setSpaceAvailble(value);\n            },\n            isEditable: true,\n        },\n        {\n            label: 'Type',\n            value: type,\n            type: 'menu',\n            onChange: (value) => {\n                setType(value);\n            },\n            isEditable: true,\n            menuItems: [\n                {\n                    label: TYPE[0],\n                    value: 0,\n                },\n                {\n                    label: TYPE[1],\n                    value: 1,\n                },\n            ],\n        },\n        {\n            label: 'Cluster Name',\n            value: cluster,\n            type: 'text',\n            endorment: {\n                startAdornment: (\n                    <InputAdornment position='start'>cluster-</InputAdornment>\n                ),\n            },\n            onChange: (value) => {\n                setCluster(value);\n            },\n            isEditable: true,\n        },\n        {\n            label: 'Registered',\n            value: isRegistered,\n            type: 'menu',\n            onChange: (value) => {\n                setRegistered(value);\n            },\n            isEditable: true,\n            menuItems: [\n                {\n                    label: 'Yes',\n                    value: true,\n                },\n                {\n                    label: 'No',\n                    value: false,\n                },\n            ],\n        },\n        {\n            label: 'Live',\n            value: isLive,\n            type: 'menu',\n            onChange: (value) => {\n                setLive(value);\n            },\n            isEditable: true,\n            menuItems: [\n                {\n                    label: 'Yes',\n                    value: true,\n                },\n                {\n                    label: 'No',\n                    value: false,\n                },\n            ],\n        },\n    ];\n\n    const giveItem = () => ({\n        city,\n        name: `Warehouse-${name}`,\n        cluster: `cluster-${cluster}`,\n        is_live: isLive,\n        is_registered: isRegistered,\n        space_available: spaceAvailble,\n        type: TYPE[type],\n        code: `W-${code}`,\n    });\n\n    const discardChanges = () => {\n        setName('');\n        setCode('');\n        setCity('');\n        setCluster('');\n        setSpaceAvailble('');\n        setRegistered(false);\n        setLive(false);\n        setType(0);\n    };\n\n    return (\n        <Dialog open={open} onClose={() => onClose()} keepMounted>\n            <DialogTitle> Add Item</DialogTitle>\n            <DialogContent>\n                {giveList().map((item) => (\n                    <div className={classes.inputGroup}>\n                        <Item {...item} />\n                    </div>\n                ))}\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    size='medium'\n                    color='primary'\n                    onClick={() => {\n                        const newItem = giveItem();\n                        dispatch(Actions.createItem(newItem));\n                        discardChanges();\n                        setSuccess(true);\n                    }}\n                >\n                    <Typography>Add</Typography>\n                </Button>\n                <Button\n                    size='medium'\n                    color='secondary'\n                    autoFocus\n                    onClick={() => {\n                        onClose();\n                    }}\n                >\n                    <Typography>Cancle</Typography>\n                </Button>\n                <Snackbar\n                    open={success}\n                    autoHideDuration={6000}\n                    onClose={() => setSuccess(false)}\n                >\n                    <MuiAlert elevation={6} variant='filled' severity='success'>\n                        Item added succesfully\n                    </MuiAlert>\n                </Snackbar>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nconst List = () => {\n    const data = useSelector((state) => state.items);\n    const classes = useStyle();\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('city');\n    const [keyword, setKeyword] = useState('');\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const [live, setLive] = useState('all');\n    const [registered, setRegistered] = useState('all');\n\n    const category = [\n        { label: 'Live', values: ['yes', 'no', 'all'] },\n        { label: 'Registred', values: ['yes', 'no', 'all'] },\n    ];\n\n    const requestSortBy = (item) => {\n        const isAsc = orderBy === item && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(item);\n    };\n\n    /**\n     * Give list of data w.r.t to the search string\n     * @returns {[data]}\n     */\n    const filteredData = () =>\n        data.filter(\n            (item) =>\n                (item.city.toLowerCase().search(keyword.toLowerCase()) >= 0 ||\n                    item.name.toLowerCase().search(keyword.toLowerCase()) >=\n                        0) &&\n                (registered === 'all' ||\n                    (item.is_registered\n                        ? registered === 'yes'\n                        : registered === 'no')) &&\n                (live === 'all' ||\n                    (item.is_live ? live === 'yes' : live === 'no'))\n        );\n\n    const handlClose = () => {\n        setModalOpen(false);\n    };\n\n    return (\n        <Paper className={classes.paper}>\n            <Toolbar>\n                <Typography\n                    className={classes.title}\n                    variant='h6'\n                    component='div'\n                >\n                    Warehouses\n                </Typography>\n                <Input\n                    value={keyword}\n                    onChange={(event) => setKeyword(event.target.value)}\n                    placeholder='city or name'\n                    endAdornment={\n                        <InputAdornment position='end'>\n                            <IconButton aria-label='search'>\n                                <SearchSharpIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    }\n                />\n                <Tooltip title='Filter list'>\n                    <IconButton\n                        aria-label='filter list'\n                        onClick={(event) => setAnchorEl(event.currentTarget)}\n                    >\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n                <Menu\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={() => setAnchorEl(null)}\n                >\n                    <MenuItem>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>Live</FormLabel>\n                            <RadioGroup\n                                name='live'\n                                value={live}\n                                onChange={(event) =>\n                                    setLive(event.target.value)\n                                }\n                            >\n                                <FormControlLabel\n                                    value='all'\n                                    control={<Radio />}\n                                    label='All'\n                                />\n                                <FormControlLabel\n                                    value='yes'\n                                    control={<Radio />}\n                                    label='Yes'\n                                />\n                                <FormControlLabel\n                                    value='no'\n                                    control={<Radio />}\n                                    label='No'\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    </MenuItem>\n                    <MenuItem>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>Registered</FormLabel>\n                            <RadioGroup\n                                name='registred'\n                                value={registered}\n                                onChange={(event) =>\n                                    setRegistered(event.target.value)\n                                }\n                            >\n                                <FormControlLabel\n                                    value='all'\n                                    control={<Radio />}\n                                    label='All'\n                                />\n                                <FormControlLabel\n                                    value='yes'\n                                    control={<Radio />}\n                                    label='Yes'\n                                />\n                                <FormControlLabel\n                                    value='no'\n                                    control={<Radio />}\n                                    label='No'\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    </MenuItem>\n                </Menu>\n            </Toolbar>\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            {HEADER.map((item) => (\n                                <TableCell key={item}>\n                                    <TableSortLabel\n                                        active={item === orderBy}\n                                        direction={order}\n                                        onClick={() => requestSortBy(item)}\n                                    >\n                                        {item}\n                                    </TableSortLabel>\n                                </TableCell>\n                            ))}\n                            <TableCell>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {stableSort(\n                            filteredData(),\n                            getComparator(order, orderBy)\n                        ).map((item) => (\n                            <EnhancedRow item={item} />\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Tooltip title='Add to the list'>\n                <Fab\n                    color='secondary'\n                    className={classes.fab}\n                    onClick={() => setModalOpen(true)}\n                >\n                    <AddIcon />\n                </Fab>\n            </Tooltip>\n            <AddModal open={isModalOpen} onClose={handlClose} />\n        </Paper>\n    );\n};\nexport default List;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Detail from './component/Detail';\nimport List from './component/List';\n\nconst Routes = () => (\n    <Router>\n        <Switch>\n            <Route path='/home'>\n                <List />\n            </Route>\n            <Route path='/detail/:id'>\n                <Detail />\n            </Route>\n            <Route path='/'>\n                <List />\n            </Route>\n        </Switch>\n    </Router>\n);\nexport default Routes;\n","import Actions from '../action';\nimport Warehouses from '../../assets/warehouses.json';\n\nconst defaultState = {\n    items: Warehouses,\n};\n\nconst reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case Actions.Types.CREATE_ITEM: {\n            // findouts the id with max value\n            let maxxId = 0;\n            state.items.forEach((item) => {\n                if (item.id > maxxId) maxxId = item.id;\n            });\n\n            // assigns maxid+1  id value to the next item\n            const newItem = { ...action.payload, id: maxxId + 1 };\n\n            const newState = {\n                items: [...state.items, newItem],\n            };\n            return newState;\n        }\n        case Actions.Types.UPDATE_ITEM: {\n            // create a new list by updating the existing one\n            const newItems = state.items.map((item) =>\n                item.id === action.payload.id ? action.payload : item\n            );\n            const newState = {\n                items: newItems,\n            };\n            return newState;\n        }\n        case Actions.Types.DELETE_ITEM: {\n            // filter outs rest of the items except the deleted one\n            const newItems = state.items.filter(\n                (item) => item.id !== action.payload.id\n            );\n            const newState = {\n                items: newItems,\n            };\n            return newState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\nexport default reducer;\n","import { ThemeProvider } from '@material-ui/styles';\nimport React from 'react';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { createMuiTheme } from '@material-ui/core';\n\nimport Routes from './Routes';\nimport configureStore from './modules/store';\n\nconst initialState = window.REDUX_INITIAL_DATA;\nconst reduxStore = configureStore(initialState);\n\nconst theme = createMuiTheme({\n    myTheme: {\n        primary: '#EE4844',\n    },\n});\n\nfunction App() {\n    return (\n        <ReduxProvider store={reduxStore}>\n            <ThemeProvider theme={theme}>\n                <Routes />\n            </ThemeProvider>\n        </ReduxProvider>\n    );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\n\n// Logger with default options\nimport logger from 'redux-logger';\n\nimport reducer from '../reducer';\n\nexport default function configureStore(initialState) {\n    const store = createStore(reducer, initialState, applyMiddleware(logger));\n    return store;\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}